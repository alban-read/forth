\ sprite background for graphics display
\ make some room for the sprite

1024 1024 2 * * constant areasize

variable sprites

create sprname z," offscn" 0 , align

create sprptr 8 allot

create sprw 1536 ,
create sprh 1024 ,

create sprx 800 ,

create spry 600 ,

create sprdir 0 ,

create sprsav 64  allot
sprsav 64 erase

code toSprite
 adr r8, sprdir
 ldr r0, [ r8 ]
 orr s r0, r0, r0,
 next ne
 mov r0, # 1
 str r0, [ r8 ]
 mov r0, # 60
 add r0, r0, # 256
 adr r8, sprites
 ldr r1, [ r8 ]
 adr r2, sprname
 mov r3, # 0
 swi " OS_SpriteOp"
 adr r8, sprsav
 str r0 [ r8, # 4 ]!
 str r1 [ r8, # 4 ]!
 str r2 [ r8, # 4 ]!
 str r3 [ r8, # 4 ]!
next c;

code toScreen
 adr r8, sprdir
 ldr r0, [ r8 ]
 orr s r0, r0, r0,
 next eq
 mov r0, # 0
 str r0, [ r8 ]
 adr r8, sprsav
 ldr r0 [ r8, # 4 ]!
 ldr r1 [ r8, # 4 ]!
 ldr r2 [ r8, # 4 ]!
 ldr r3 [ r8, # 4 ]!
 swi " OS_SpriteOp"
next c;

: sprites@
  sprites @ ;


code InitSpriteArea
 mov r1, tos
 ldmfd sp !, { tos }
 mov r0, # 9
 add r0, r0, # 256
 swi " OS_SpriteOp"
next c;

\ FROM SCREEN
code MakeSprite
 stmfd sp !, { tos }
 mov r0, # 16
 add r0, r0, # 256
 adr r8, sprites
 ldr r1, [ r8 ]
 adr r2, sprname
 mov r3, # 0
 mov r4, # 0
 mov r5, # 0
 adr r8, sprw
 ldr r6, [ r8 ]
 adr r8, sprh
 ldr r7, [ r8
 mov r8, # 0
 swi " OS_SpriteOp"
 mov tos, r2
next c;

code plotSprite ( x y -- )
 mov r0, # 34
 add r0, r0, # 256
 adr r8, sprites
 ldr r1, [ r8 ]
 adr r2, sprname
 mov r4, tos
 ldmfd sp !, { r3, tos }
 mov r5, # 0
 swi " OS_SpriteOp"
next c;

\ at x y do t
code os_plot_xy ( x y t -- )
 mov r0, tos
 ldmfd sp !, { r3, r4, tos }
 mov r1, r4
 mov r2, r3
 swi " OS_Plot"
next c;

\ line from x y to x1 y1
code line ( x y x1 y1 --  )
 mov r3, tos
 ldmfd sp !, { r4, r5, r6, tos }
 mov r0, # 4
 mov r1, r4
 mov r2, r3
 swi " OS_Plot"
 mov r1, r6
 mov r2, r5
 mov r0, # 5
 swi " OS_Plot"
next c;

code circle ( x y x1 y1 --  )
 mov r3, tos
 ldmfd sp !, { r4, r5, r6, tos }
 mov r0, # 4
 mov r1, r4
 mov r2, r3
 swi " OS_Plot"
 mov r1, r6
 mov r2, r5
 mov r0, # 149
 swi " OS_Plot"
next c;

code fillcircle ( x y x1 y1 --  )
 mov   r3, tos
 ldmfd sp !, { r4, r5, r6, tos }
 mov   r0, # 4
 mov   r1, r4
 mov   r2, r3
 swi   " OS_Plot"
 mov   r1, r6
 mov   r2, r5
 mov   r0, # 157
 swi   " OS_Plot"
next c;


code fillrect ( x y x1 y1 --  )
 mov   r1, tos
 ldmfd sp !, { tos }
 mov   r2, tos
 mov   r0, # 4
 swi   " OS_Plot"
 ldmfd sp !, { tos }
 mov   r1, tos
 ldmfd sp !, { tos }
 mov   r2, tos
 mov   r0, # 101
 swi   " OS_Plot"
 ldmfd sp !, { tos }
next c;


: clr 12 OS_WriteC ;

: clg 16 OS_WriteC ;

\ RISC OS colour
\ %00ggbbrr white= %00111111 = 63 black = 0
: gcol 18 OS_WriteC 0 OS_WriteC OS_WriteC ;

: colour 17 OS_WriteC OS_WriteC ;

: bcolour 17 OS_WriteC  128 + OS_WriteC ;

: bcol 18 OS_WriteC 0 OS_WriteC 128 + OS_WriteC ;


variable origin 29 c, 0 w, 0 w,  align

code setorigin
 adr    r0, origin
 mov    r1, # 5
 swi    " OS_WriteN"
next c;



\ normal behaviour in the FORTH window is ToSprite
\ outside of the FORTH window ToSprite has to be selected.


0 value initSprites?

: initSprites
   initSprites? 0= if
    areasize malloc sprites !
    sprites@ areasize erase
    areasize sprites@ !
     0 sprites@ 4+ !
    16 sprites@ 8+ !
    16 sprites@ 12 + !
    sprites@ InitSpriteArea
     MakeSprite sprptr !
    then
   1 to InitSprites?
 ;



